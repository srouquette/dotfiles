# check if scoop is installed
if (!(Get-Command 'scoop' -ErrorAction 'Ignore')) {
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
    Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
}

$scoopAria = (scoop config aria2-enabled)
if ("$scoopAria" -ne 'True') {
    scoop config aria2-enabled true
    scoop config aria2-warning-enabled false
}
$scoopShim = (scoop config shim)
if ("$scoopShim" -ne 'kiennq') {
    scoop config shim kiennq
    scoop reset *
}

$buckets = @{
{{- range $k, $v := .scoop.buckets }}
    {{ $k | quote }} = {{ $v | quote }}
{{- end }}
}

$apps = @{
{{- range $k, $v := .scoop.packages.main }}
    {{ $k | quote }} = {{ $v | quote }}
{{- end }}
{{ if eq .profile "work" -}}
{{- range $k, $v := .scoop.packages.work }}
    {{ $k | quote }} = {{ $v | quote }}
{{- end }}
{{- end }}
}

# scoop export will return a json with buckets and apps installedq
$export = Invoke-Command -ScriptBlock { scoop export } | ConvertFrom-Json

# filter out existing buckets
$export.buckets | ForEach-Object {
    if ($buckets.ContainsKey($_.Name)) {
        $buckets.Remove($_.Name)
    }
}
# add remaining buckets
$buckets.GetEnumerator() | ForEach-Object {
    if ($_.Value) {
        scoop bucket add $_.Key $_.Value
    } else {
        scoop bucket add $_.Key
    }
}

# filter out installed apps
$export.apps | ForEach-Object {
    if ($apps.ContainsKey($_.Name)) {
        $apps.Remove($_.Name)
    }
}
# install apps
if ($apps.count -gt 0) {
    gsudo {
        $args[0].GetEnumerator() | ForEach-Object {
            if ($_.Value.StartsWith('https://')) {
                scoop install "$($_.Value)"
            } else {
                scoop install "$($_.Value)/$($_.Key)"
            }
        }
    } -args $apps
}

if ($buckets.Count -ne 0 -or $apps.Count -ne 0) {
    Write-Host scoop added $buckets.Count new buckets and $apps.Count apps.
}

# if archwsl wasn't previously installed, run setup
if ($apps.ContainsKey('archwsl')) {
{{ template "archwsl_setup.ps1" . }}
}
